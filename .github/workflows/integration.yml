name: CI

on:
  push:
    branches:
    - master
    tags:
    - '*'
    paths:
    - .github/workflows/integration.yml
    - .golangci.yaml
    - sonar-project.properties
    - go.mod
    - go.sum
    - '**.go'
  pull_request:
    branches:
    - master
    paths:
    - .github/workflows/integration.yml
    - .golangci.yaml
    - sonar-project.properties
    - go.mod
    - go.sum
    - '**.go'

env:
  GOLANG_VERSION: 1.16
  GOLANG_FLAGS: -race -mod=vendor
  WORK_DIR: /usr/src

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.16, 1.15, 1.14]
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup golang
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache build
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${GOCACHE}
        key: ${{ runner.os }}-build-${{ matrix.go-version }}-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.go-version }}-${{ hashFiles('**/*.go') }}
          ${{ runner.os }}-build-${{ matrix.go-version }}-
          ${{ runner.os }}-build-
    - name: build
      uses: wwmoraes/actions/golang/build@master
      with:
        output-dir: bin
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup golang
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache lint
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${{ env.HOME }}/.cache/golangci-lint
        key: ${{ runner.os }}-lint-${{ hashFiles('.golangci.yaml') }}
        restore-keys: |
          ${{ runner.os }}-lint-${{ hashFiles('.golangci.yaml') }}
          ${{ runner.os }}-lint-
    - name: lint
      uses: wwmoraes/actions/golang/lint@master
      id: lint
      with:
        work-dir: ${{ env.WORK_DIR }}
    - name: upload lint report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: lint-report
        path: ${{ steps.lint.outputs.report-file }}
  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: setup golang
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}
    - name: set golang environment variables
      uses: wwmoraes/actions/golang/env@master
    - name: cache test
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${GOCACHE}
        key: ${{ runner.os }}-test-${{ hashFiles('**/*.go') }}
        restore-keys: |
          ${{ runner.os }}-test-${{ hashFiles('**/*.go') }}
          ${{ runner.os }}-test-
    - name: test
      uses: wwmoraes/actions/golang/test@master
      id: test
    - name: upload coverage report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: coverage-report
        path: ${{ steps.test.outputs.cover-profile }}
    - name: upload test report
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: test-report
        path: ${{ steps.test.outputs.report-file }}
  report:
    runs-on: ubuntu-latest
    needs: [lint,test]
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: cache sonar scanner
      uses: pat-s/always-upload-cache@v2.1.3
      with:
        path: ${{ runner.temp }}/sonar-scanner/cache
        key: ${{ runner.os }}-sonar-scanner-cache-${{ hashFiles('**/sonar-project.properties') }}
        restore-keys: |
          ${{ runner.os }}-sonar-scanner-cache-${{ hashFiles('**/sonar-project.properties') }}
          ${{ runner.os }}-sonar-scanner-cache-
    - name: download lint report
      uses: actions/download-artifact@v2
      with:
        name: lint-report
    - name: download test report
      uses: actions/download-artifact@v2
      with:
        name: test-report
    - name: download coverage report
      uses: actions/download-artifact@v2
      with:
        name: coverage-report
    - name: run sonar scanner
      uses: wwmoraes/actions/sonar-scanner@master
      with:
        token: ${{ secrets.SONAR_TOKEN }}
        work-dir: ${{ env.WORK_DIR }}
        home: ${{ runner.temp }}/sonar-scanner
  release:
    runs-on: ubuntu-latest
    needs: [build,lint,test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: generate changelog
      id: changelog
      uses: heineiuo/create-changelogs@master
    - name: create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: ${{ steps.changelog.outputs.changelogs }}
        draft: false
        prerelease: ${{ steps.changelog.outputs.release_type == 'prerelease' }}
